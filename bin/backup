#!/bin/bash
set -e

# See https://github.com/eXtalionLab/docker-backup

script="${0}"
script_path="$(dirname "$(realpath "${script}")")/.."
root_path="$(pwd)"

###> config ###
backupDir='backups'
dockerDbServiceName='db'
# Use local image to skip download
dockerImgToBackupVolumes='alpine'
dockerVolumesDir='docker_volumes'
# Allow types: custom, mysql, postgresql
# MySQL's default "max_allowed_packet" setting is fairly conservative
dbType='mysql'
envFile='.env'
###< config ###

###> files/volumes to backup ###
filesToBackup=()
filesToExclude=()
# Remember to prefix volumes with docker-compose project name
volumesToBackup=()
###< files/volumes to backup ###

###> borg ###
# See https://www.borgbackup.org/
export BORG_REPO='backups/app'
export BORG_PASSPHRASE='Change_me!'
###< borg ###

###> Change it if you known what you're doing ###
backupName="$(date +%Y%m%d_%H%M%S)"
backupLogFile="${backupDir}/${backupName}.log"
commandToRun="${1}" # See help()
configFileName='.docker-backup'
dockerDbDumpFile="/docker-entrypoint-initdb.d/dump.sql"
localDockerDbDumpFile='initdb.d/dump.sql'
logIndent=''
# (16MB). If we try to dump a row which is larger than this limit, the
# dump will fail.
mysqlMaxAllowedPacket='1G'
###< Change it if you known what you're doing ###

function help {
    echo "Run: ${script} [command]"
    echo ""
    echo "Commands:"
    echo "    run             Backup db and files"
    echo "    install         Create new file ${configFileName}.dist"
    echo "    restore_volumes Restore volumes files"

    exit
}

function increaseLogIndent {
    logIndent="${logIndent}  "
}

function decreaseLogIndent {
    logIndent="${logIndent%'  '}"
}

function log {
    echo "[$(date +"%Y-%m-%d %H:%M:%S")] ${1} - ${2}"
}

function error {
    log 'ERROR' "${1}"
    exit 1
}

function info {
    log 'INFO' "${logIndent}${1}"
}

function warning {
    log 'WARNING' "${1}"
}

function loadFile {
    file="${1}"

    if [[ -f "${file}" ]]; then
        info "Load ${file}"
        source "${file}"
    fi
}

function createDir {
    local dir="${1}"
    local logFile
    logFile="$(basename "${backupLogFile}")"

    if [[ ! -d "${dir}" ]]; then
        info "Create \"${dir}\" directory"

        mkdir -p "${dir}" >> "${logFile}" 2>&1 \
        || error "Fail. See ${logFile}"

        if [[ ! -s "${logFile}" ]]; then
            rm -f "${logFile}"
        fi
    fi
}

function getEnv {
    local env="${1}"

    grep "^${env}=" "${envFile}" | awk -F= '{print $2}'
}

function init {
    info 'Init'

    increaseLogIndent

    local configFile="${root_path}/${configFileName}"

    loadFile "${configFile}.dist"
    loadFile "${configFile}"
    createDir "${backupDir}"
    decreasePriority
    initBorg

    decreaseLogIndent

    info 'Start backup'
}

function decreasePriority {
    info 'Decrease CPU priority'

    # Decrease the CPU priority of this process so it doesn't contend with
    # other more important things.

    renice -n 19 $$ >> /dev/null 2> "${backupLogFile}"
}

function initBorg {
    info "Init borg repo \"${BORG_REPO}\""

    borg init \
        -e repokey-blake2 \
        --make-parent-dirs >> "${backupLogFile}" 2>&1 \
    || error "Fail. See ${backupLogFile}"
}

function clean {
    info 'Clean after backup'

    increaseLogIndent

    cleanDbDump
    cleanVolumesDump
    cleanBorg

    decreaseLogIndent

    if [[ ! -s "${backupLogFile}" ]]; then
        rm -f "${backupLogFile}"
    fi
}

function cleanDbDump {
    if [[ ! -f "${localDockerDbDumpFile}" ]]; then
        return
    fi

    info "Remove sql dump \"${localDockerDbDumpFile}\""

    rm -f "${localDockerDbDumpFile}" >> "${backupLogFile}" 2>&1 \
    || warning "Fail. See ${backupLogFile}"
}

function cleanVolumesDump {
    if [[ ${#volumesToBackup[@]} -le 0 ]]; then
        return
    fi

    info "Remove volumes files from \"${dockerVolumesDir}\""

    # We can't remove directory, have to iterate thru all volumes
    for v in "${volumesToBackup[@]}"; do
        docker run --rm \
            -v "$(realpath "${dockerVolumesDir}")":/local_dir \
            "${dockerImgToBackupVolumes}" \
            rm -rf "/local_dir/${v}"  >> "${backupLogFile}" 2>&1 \
        || warning "Fail. See ${backupLogFile}"
    done
}

function cleanBorg {
    info 'Prune borg repository'

    borg prune \
        --list \
        --stats \
        --keep-daily 7 \
        --keep-weekly 4 \
        --keep-monthly 6 >> "${backupLogFile}" 2>&1 \
    || warning "Fail. See \"${backupLogFile}\""
}

function dumpDb {
    if [[ "${dbType}" == '' ]]; then
        return
    fi

    info 'Dump db'

    increaseLogIndent

    if [[ "${dbType}" == 'custom' ]]; then
        info 'Dump custom db'
        dumpCustomDb
    elif [[ "${dbType}" == 'mysql' ]]; then
        dumpMysqlDb
    elif [[ "${dbType}" == 'postgresql' ]]; then
        dumpPostgresDb
    else
        warning "Skip. Unknown db type \"${dbType}\""

        return
    fi

    decreaseLogIndent

    if [[ -f "${localDockerDbDumpFile}" ]]; then
        filesToBackup+=("${localDockerDbDumpFile}")
    fi
}

function dumpCustomDb {
    # Output file has to be saved to ${localDockerDbDumpFile}

    # Your docker service which will make a dump should has a volumes map like:
    # - $(dirname $(realpath ${localDockerDbDumpFile})):$(dirname $(realpath ${dockerDbDumpFile}))

    # Example:
    #
    # your_command_to_dump \
    #     --output ${localDockerDbDumpFile} >> "${backupLogFile}" 2>&1
    #
    # or
    #
    # docker-compose exec docker_service \
    #     your_command_to_dump --output ${dockerDbDumpFile} >> "${backupLogFile}" 2>&1

    warning 'Skip. Not implemented'
}

function dumpMysqlDb {
    info 'Dump mysql db'

    local dbName
    local dbPassword
    local dbUser

    dbName="$(getEnv 'MYSQL_DATABASE')"
    dbPassword="$(getEnv 'MYSQL_PASSWORD')"
    dbUser="$(getEnv 'MYSQL_USER')"

    docker-compose exec -T "${dockerDbServiceName}" mysqldump \
        --hex-blob \
        --single-transaction \
        --max-allowed-packet "${mysqlMaxAllowedPacket}" \
        -r "${dockerDbDumpFile}" \
        -u "${dbUser}" \
        -p"${dbPassword}" \
        "${dbName}" >> "${backupLogFile}" 2>&1 \
    || warning "Fail. See \"${backupLogFile}\""
}

function dumpPostgresDb {
    info 'Dump postgres db'

    local dbName
    local dbUser

    dbName="$(getEnv 'POSTGRES_DB')"
    dbUser="$(getEnv 'POSTGRES_USER')"

    docker-compose exec -T "${dockerDbServiceName}" pg_dump \
        -b \
        -f "${dockerDbDumpFile}" \
        -U "${dbUser}" \
        "${dbName}" >> "${backupLogFile}" 2>&1 \
    || warning "Fail. See \"${backupLogFile}\""
}

function dumpVolumes {
    if [[ ${#volumesToBackup[@]} -eq 0 ]]; then
        return
    fi

    info 'Dump files from volume(s)'

    increaseLogIndent

    createDir "${dockerVolumesDir}"

    local volumesBind=()

    for v in "${volumesToBackup[@]}"; do
        volumesBind+=("-v ${v}:/volumes/${v}")
    done

    docker run --rm \
        ${volumesBind[*]} \
        -v "$(realpath "${dockerVolumesDir}")":/local_dir \
        "${dockerImgToBackupVolumes}" \
        cp -aR /volumes/. /local_dir/. >> "${backupLogFile}" 2>&1 \
    || warning "Fail. See \"${backupLogFile}\""

    filesToBackup+=("${dockerVolumesDir}")

    decreaseLogIndent
}

function backupFiles {
    info 'Backup file(s)'

    increaseLogIndent

    if [[ ${#filesToBackup[@]} -eq 0 ]]; then
        info 'Skip. No files to backup'

        return
    fi

    mapExcludeFilesToCommandOption

    borg create \
        --list \
        --filter AME \
        --stats \
        --noacls \
        --compression zstd,5 \
        ${filesToExclude[*]} \
        --exclude-caches \
        ::"${backupName}" \
        ${filesToBackup[*]} >> "${backupLogFile}" 2>&1 \
    || warning "Fail. See \"${backupLogFile}\""

    decreaseLogIndent
}

function mapExcludeFilesToCommandOption {
    for i in "${!filesToExclude[@]}"; do
        filesToExclude[${i}]="--exclude ${filesToExclude[${i}]}"
    done
}

function install {
    local configFile="${root_path}/${configFileName}.dist"

    info "Install \"${configFileName}.dist\""

    increaseLogIndent

    if [[ -d "${configFile}" ]]; then
        error "\"${configFile}\" is a directory"
    fi

    if [[ -f "${configFile}" ]]; then
        info "Config file \"${configFile}\" exists, override? [y/n]"

        read -rn 1 -p "-> " override
        echo ""

        if [[ "${override}" != 'y' ]]; then
            return
        fi

        if [[ ! -w "${configFile}" ]]; then
            error "Can't override file \"${configFile}\""
        fi

        cp "${script_path}/${configFileName}.template" "${configFile}"

        decreaseLogIndent

        return
    fi

    if [[ ! -w "${root_path}" ]]; then
        error "Can't create a file in \"${root_path}\""
    fi

    cp "${script_path}/${configFileName}.template" "${configFile}"

    decreaseLogIndent
}

function restoreVolumesFilesFromLocalDir {
    info "Restore volumes files from \"${dockerVolumesDir}\""

    local volumesBind=()

    for v in "${volumesToBackup[@]}"; do
        volumesBind+=("-v ${v}:/volumes/${v}")
    done

    docker run --rm \
        ${volumesBind[*]} \
        -v "$(realpath "${dockerVolumesDir}")":/local_dir \
        "${dockerImgToBackupVolumes}" \
        cp -aR /local_dir/. /volumes/. >> "${backupLogFile}" 2>&1 \
    || warning "Fail. See \"${backupLogFile}\""
}

if [[ "${commandToRun}" == 'run' ]]; then
    init
    dumpDb
    dumpVolumes
    backupFiles
    clean
elif [[ "${commandToRun}" == 'install' ]]; then
    install
elif [[ "${commandToRun}" == 'restore_volumes' ]]; then
    init
    restoreVolumesFilesFromLocalDir
else
    help
fi
